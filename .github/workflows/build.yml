name: Build & Test

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

on:
  workflow_call:
    inputs:
      run-test:
        default: true
        type: boolean

jobs:
  build:
    name: ${{ matrix.platform }} (${{ matrix.target }}) (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux-arm64
          - linux-arm
          - linux-x64
          - linux-x86
          - linux-powerpc64
          - windows-arm64
          - windows-x64
          - windows-x86
          - macos-arm64
          - macos-x64

        include:
          # When adding a new `target`:
          # 1. Define a new platform alias above
          # 2. Add a new record to the matrix map in `cli/npm/install.js`
          - { platform: linux-arm64       , target: aarch64-unknown-linux-gnu     , os: ubuntu-24.04-arm , features: wasm }
          - { platform: linux-arm         , target: armv7-unknown-linux-gnueabihf , os: ubuntu-latest    , emulated: true }
          - { platform: linux-x64         , target: x86_64-unknown-linux-gnu      , os: ubuntu-22.04     , features: wasm }
          - { platform: linux-x86         , target: i686-unknown-linux-gnu        , os: ubuntu-latest    , emulated: true }
          - { platform: linux-powerpc64   , target: powerpc64-unknown-linux-gnu   , os: ubuntu-latest    , emulated: true }
          - { platform: windows-arm64     , target: aarch64-pc-windows-msvc       , os: windows-latest                    }
          - { platform: windows-x64       , target: x86_64-pc-windows-msvc        , os: windows-latest   , features: wasm }
          - { platform: windows-x86       , target: i686-pc-windows-msvc          , os: windows-latest                    }
          - { platform: macos-arm64       , target: aarch64-apple-darwin          , os: macos-latest     , features: wasm }
          - { platform: macos-x64         , target: x86_64-apple-darwin           , os: macos-13         , features: wasm }
          - { platform: wasm32            , target: wasm32-unknown-unknown        , os: ubuntu-latest    , no-run: true   }

          # Cross compilers for C library
          - { platform: linux-arm64       , cc: aarch64-linux-gnu-gcc           , ar: aarch64-linux-gnu-ar   }
          - { platform: linux-arm         , cc: arm-linux-gnueabihf-gcc         , ar: arm-linux-gnueabihf-ar }
          - { platform: linux-x86         , cc: gcc -m32                        , ar: ar                     }
          - { platform: linux-powerpc64   , cc: powerpc64-linux-gnu-gcc         , ar: powerpc64-linux-gnu-ar }

          # Prevent race condition (see #2041)
          - { platform: windows-x64   , rust-test-threads: 1 }
          - { platform: windows-x86   , rust-test-threads: 1 }

          # Can't natively run CLI on Github runner's host
          - { platform: windows-arm64 , no-run: true }

    env:
      BUILD_CMD: cargo
      SUFFIX: ${{ contains(matrix.target, 'windows') && '.exe' || '' }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Read Emscripten version
      run: printf 'EMSCRIPTEN_VERSION=%s\n' "$(<crates/loader/emscripten-version)" >> $GITHUB_ENV

    - name: Install Emscripten
      if: ${{ !matrix.no-run && !matrix.emulated }}
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: ${{ env.EMSCRIPTEN_VERSION }}

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: ${{ matrix.target }}

    - name: Install QEMU and cross-compilation toolchains
      if: ${{ matrix.emulated }}
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support

        if [[ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross
          echo "CARGO_BUILD_TARGET=armv7-unknown-linux-gnueabihf" >> $GITHUB_ENV
          echo "CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
          echo "CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
          echo "CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++" >> $GITHUB_ENV
          echo "AR_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-ar" >> $GITHUB_ENV
          echo "CFLAGS_armv7_unknown_linux_gnueabihf=-ffunction-sections -fdata-sections -fPIC -march=armv7-a -mfpu=vfpv3-d16" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS_armv7_unknown_linux_gnueabihf=--sysroot=/usr/arm-linux-gnueabihf -idirafter/usr/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig/" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "QEMU_LD_PREFIX=/usr/arm-linux-gnueabihf" >> $GITHUB_ENV
          # Override global CC to force build scripts to use ARM compiler
          echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
          echo "CXX=arm-linux-gnueabihf-g++" >> $GITHUB_ENV
          echo "LD=arm-linux-gnueabihf-ld" >> $GITHUB_ENV
          echo "CFLAGS=-ffunction-sections -fdata-sections -fPIC -march=armv7-a -mfpu=vfpv3-d16" >> $GITHUB_ENV
        elif [[ "${{ matrix.target }}" == "i686-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-multilib libc6-dev-i386
          echo "CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=gcc" >> $GITHUB_ENV
          echo "CC_i686_unknown_linux_gnu=gcc -m32" >> $GITHUB_ENV
          echo "CXX_i686_unknown_linux_gnu=g++ -m32" >> $GITHUB_ENV
        elif [[ "${{ matrix.target }}" == "powerpc64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-powerpc64-linux-gnu libc6-dev-ppc64-cross
          echo "CARGO_BUILD_TARGET=powerpc64-unknown-linux-gnu" >> $GITHUB_ENV
          echo "CARGO_TARGET_POWERPC64_UNKNOWN_LINUX_GNU_LINKER=powerpc64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_powerpc64_unknown_linux_gnu=powerpc64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_powerpc64_unknown_linux_gnu=powerpc64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_powerpc64_unknown_linux_gnu=powerpc64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CFLAGS_powerpc64_unknown_linux_gnu=-ffunction-sections -fdata-sections -fPIC -m64" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS_powerpc64_unknown_linux_gnu=--sysroot=/usr/powerpc64-linux-gnu -idirafter/usr/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/powerpc64-linux-gnu/pkgconfig/" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "QEMU_LD_PREFIX=/usr/powerpc64-linux-gnu" >> $GITHUB_ENV
          # Override global CC to force build scripts to use PowerPC compiler
          echo "CC=powerpc64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=powerpc64-linux-gnu-g++" >> $GITHUB_ENV
          echo "LD=powerpc64-linux-gnu-ld" >> $GITHUB_ENV
          echo "CFLAGS=-ffunction-sections -fdata-sections -fPIC -m64" >> $GITHUB_ENV
        fi

        sudo systemctl restart systemd-binfmt

    - name: Set up environment
      env:
        RUST_TEST_THREADS: ${{ matrix.rust-test-threads }}
        TARGET: ${{ matrix.target }}
        CC: ${{ matrix.cc }}
        AR: ${{ matrix.ar }}
      run: |
        echo "DEBUG: Starting environment setup for target: $TARGET"
        set -x
        PATH="$PWD/.github/scripts:$PATH"
        printf '%s/.github/scripts\n' "$PWD" >> $GITHUB_PATH

        printf '%s\n' >> $GITHUB_ENV \
          'TREE_SITTER=tree-sitter.sh' \
          "TARGET=$TARGET" \
          "ROOT=$PWD"

        [[ -n $RUST_TEST_THREADS ]] && \
          printf 'RUST_TEST_THREADS=%s\n' "$RUST_TEST_THREADS" >> $GITHUB_ENV

        [[ -n $CC ]] && printf 'CC=%s\n' "$CC" >> $GITHUB_ENV
        [[ -n $AR ]] && printf 'AR=%s\n' "$AR" >> $GITHUB_ENV
        set +x
        echo "DEBUG: Environment setup completed"

    # TODO: Remove RUSTFLAGS="--cap-lints allow" once we use a wasmtime release that addresses
    # the `mismatched-lifetime-syntaxes` lint
    - name: Build wasmtime library (Windows x64 MSYS2)
      if: ${{ !matrix.emulated && contains(matrix.features, 'wasm') && matrix.platform == 'windows-x64' }}
      run: |
        mkdir -p target
        WASMTIME_VERSION=$(cargo metadata --format-version=1 --locked --features wasm | \
                           jq -r '.packages[] | select(.name == "wasmtime-c-api-impl") | .version')
        curl -LSs "$WASMTIME_REPO/archive/refs/tags/v${WASMTIME_VERSION}.tar.gz" | tar xzf - -C target
        cd target/wasmtime-${WASMTIME_VERSION}
        cmake -S crates/c-api -B target/c-api \
          -DCMAKE_INSTALL_PREFIX="$PWD/artifacts" \
          -DWASMTIME_DISABLE_ALL_FEATURES=ON \
          -DWASMTIME_FEATURE_CRANELIFT=ON \
          -DWASMTIME_TARGET='x86_64-pc-windows-gnu'
        cmake --build target/c-api && cmake --install target/c-api
        printf 'CMAKE_PREFIX_PATH=%s\n' "$PWD/artifacts" >> $GITHUB_ENV
      env:
        WASMTIME_REPO: https://github.com/bytecodealliance/wasmtime
        RUSTFLAGS: "--cap-lints allow"

    - name: Install MinGW and Clang (Windows x64 MSYS2)
      if: ${{ matrix.platform == 'windows-x64' }}
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: |
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-make
          mingw-w64-x86_64-cmake

    - name: Build C library (Windows x64 MSYS2 CMake)
      if: ${{ matrix.platform == 'windows-x64' }}
      shell: msys2 {0}
      run: |
        cmake -G Ninja -S . -B build/static \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
          -DTREE_SITTER_FEATURE_WASM=$WASM \
          -DCMAKE_C_COMPILER=clang
        cmake --build build/static
        rm -rf build/static

        cmake -G Ninja -S . -B build/shared \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
          -DTREE_SITTER_FEATURE_WASM=$WASM \
          -DCMAKE_C_COMPILER=clang
        cmake --build build/shared
        rm -rf build/shared
      env:
        WASM: ${{ contains(matrix.features, 'wasm') && 'ON' || 'OFF' }}

    # TODO: Remove RUSTFLAGS="--cap-lints allow" once we use a wasmtime release that addresses
    # the `mismatched-lifetime-syntaxes` lint
    - name: Build wasmtime library
      if: ${{ !matrix.emulated && contains(matrix.features, 'wasm') }}
      run: |
        mkdir -p target
        WASMTIME_VERSION=$(cargo metadata --format-version=1 --locked --features wasm | \
                           jq -r '.packages[] | select(.name == "wasmtime-c-api-impl") | .version')
        curl -LSs "$WASMTIME_REPO/archive/refs/tags/v${WASMTIME_VERSION}.tar.gz" | tar xzf - -C target
        cd target/wasmtime-${WASMTIME_VERSION}
        cmake -S crates/c-api -B target/c-api \
          -DCMAKE_INSTALL_PREFIX="$PWD/artifacts" \
          -DWASMTIME_DISABLE_ALL_FEATURES=ON \
          -DWASMTIME_FEATURE_CRANELIFT=ON \
          -DWASMTIME_TARGET='${{ matrix.target }}'
        cmake --build target/c-api && cmake --install target/c-api
        printf 'CMAKE_PREFIX_PATH=%s\n' "$PWD/artifacts" >> $GITHUB_ENV
      env:
        WASMTIME_REPO: https://github.com/bytecodealliance/wasmtime
        RUSTFLAGS: "--cap-lints allow"

    - name: Build C library (make)
      if: ${{ runner.os != 'Windows' }}
      run: make.sh -j CFLAGS="$CFLAGS"
      env:
        CFLAGS: -g -Werror -Wall -Wextra -Wshadow -Wpedantic -Werror=incompatible-pointer-types

    - name: Build C library (CMake)
      run: |
        cmake -S . -B build/static \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
          -DTREE_SITTER_FEATURE_WASM=$WASM
        cmake --build build/static --verbose

        cmake -S . -B build/shared \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
          -DTREE_SITTER_FEATURE_WASM=$WASM
        cmake --build build/shared --verbose
      env:
        WASM: ${{ contains(matrix.features, 'wasm') && 'ON' || 'OFF' }}

    - name: Build wasm library
      # No reason to build on the same Github runner hosts many times
      if: ${{ !matrix.no-run && !matrix.emulated }}
      shell: bash
      run: |
        cd lib/binding_web
        npm ci
        CJS=true npm run build
        CJS=true npm run build:debug
        npm run build
        npm run build:debug

    - name: Check no_std builds
      if: ${{ !matrix.no-run && inputs.run-test }}
      shell: bash
      run: |
        cd lib
        $BUILD_CMD check --no-default-features --target=${{ matrix.target }}

    - name: Build target
      run: |
        PACKAGE=""
        if [[ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]]; then
          PACKAGE="-p tree-sitter"
        fi
        $BUILD_CMD build --release --target=${{ matrix.target }} --features=${{ matrix.features }} $PACKAGE

    - name: Cache fixtures
      id: cache
      if: ${{ !matrix.no-run && inputs.run-test }}
      uses: ./.github/actions/cache

    - name: Fetch fixtures
      if: ${{ !matrix.no-run && inputs.run-test }}
      run: $BUILD_CMD run -p xtask --target=${{ matrix.target }} -- fetch-fixtures

    - name: Generate fixtures
      if: ${{ !matrix.no-run && inputs.run-test && steps.cache.outputs.cache-hit != 'true' }}
      run: $BUILD_CMD run -p xtask --target=${{ matrix.target }} -- generate-fixtures

    - name: Generate Wasm fixtures
      if: ${{ !matrix.no-run && !matrix.emulated && inputs.run-test && steps.cache.outputs.cache-hit != 'true' }}
      run: $BUILD_CMD run -p xtask --target=${{ matrix.target }} -- generate-fixtures --wasm

    - name: Run main tests
      if: ${{ !matrix.no-run && inputs.run-test }}
      run: $BUILD_CMD test --target=${{ matrix.target }} --features=${{ matrix.features }}

    - name: Run wasm tests
      if: ${{ !matrix.no-run && !matrix.emulated && inputs.run-test }}
      run: $BUILD_CMD run -p xtask --target=${{ matrix.target }} -- test-wasm

    - name: Upload CLI artifact
      if: ${{ matrix.platform != 'wasm32' }}
      uses: actions/upload-artifact@v4
      with:
        name: tree-sitter.${{ matrix.platform }}
        path: target/${{ matrix.target }}/release/tree-sitter${{ env.SUFFIX }}
        if-no-files-found: error
        retention-days: 7

    - name: Upload Wasm artifacts
      if: ${{ matrix.platform == 'linux-x64' }}
      uses: actions/upload-artifact@v4
      with:
        name: tree-sitter.wasm
        path: |
          lib/binding_web/web-tree-sitter.js
          lib/binding_web/web-tree-sitter.js.map
          lib/binding_web/web-tree-sitter.cjs
          lib/binding_web/web-tree-sitter.cjs.map
          lib/binding_web/web-tree-sitter.wasm
          lib/binding_web/web-tree-sitter.wasm.map
          lib/binding_web/debug/web-tree-sitter.cjs
          lib/binding_web/debug/web-tree-sitter.cjs.map
          lib/binding_web/debug/web-tree-sitter.js
          lib/binding_web/debug/web-tree-sitter.js.map
          lib/binding_web/debug/web-tree-sitter.wasm
          lib/binding_web/debug/web-tree-sitter.wasm.map
          lib/binding_web/lib/*.c
          lib/binding_web/lib/*.h
          lib/binding_web/lib/*.ts
          lib/binding_web/src/*.ts
        if-no-files-found: error
        retention-days: 7
